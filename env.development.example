# Copy this file to .env and update the shell environment variables below.

# The URL origin for this site
# URL hostname for your project. During dev mode, add or use a localhost domain in /etc/hosts.
#   Eg, in /etc/hosts add: 127.0.0.1 webstack.loc
# If you do not have permission to modify the file, you can use a public wildcard domain like lvh.me
WEBSTACK_HOST=webstack.loc

# In dev mode, we force http (instead of using https) by setting protocol to "http" here.
WEBSTACK_PROTOCOL=http

# We move the WebSocket host to a different domain mainly for dev mode, so frontend work using Hot Module Replacement does not interfere
WEBSOCKET_WEBSTACK_HOST=ws.webstack.loc


# passportjs-auth session secret
AUTH_SESSION_SECRET=someDevModeSecret

# JWT secret or public key. (To support API calls from another server, rather than a user in a browser.)
# AUTH_JWT_SECRET=mySecretOrPublicKey

# OpenId/Oauth Providers:
#GITHUB_CLIENT_ID=yourGithubClientIdHere
#GITHUB_CLIENT_SECRET=yourGithubClientSecret


# postgres settings, for when you drop in actual backend-server and background-worker.
# NOTE: the official Docker postgres container's init script uses these values to create a db and user. Best to set these
#  before building the Docker containers.
POSTGRES_MAIN_DB=webstack
POSTGRES_MAIN_USER=webstack_user
POSTGRES_MAIN_PASSWORD=my_dev_mode_password


# RabbitMQ
RABBITMQ_ERLANG_COOKIE=some_shared_secret_to_access_rabbit_broker
RABBITMQ_DEFAULT_USER=guest
RABBITMQ_DEFAULT_PASS=guest


# traefik-related vars used in docker-compose.
# Traefik uses to URL to ask passportjs-auth if a request should be allowed to pass:
INTERNAL_AUTH_CHECK=http://passportjs-auth:4001/_auth/verify
# we tell traefik to copy these headers from the passportjs-auth authentication check response onto the request when routing it to its destination service
INTERNAL_AUTH_HEADERS=x-auth-user, x-auth-email, x-auth-jwt, x-auth-data, x-auth-guest, x-auth-sessionkey, x-auth-csrf
