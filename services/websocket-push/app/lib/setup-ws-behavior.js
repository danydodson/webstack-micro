const setupWsConnections = require('./ws-connections.js');
const setupInboundWsMessages = require('./messaging-api.js');
const { socketAddedForUser } = require('./membership-tracking.js');
const { setupRedisSubscriptionForBroadcast } = require('./broadcast.js');
const setupRedisSubscriptionForUserLogin = require('./login-listener.js');


const WebsocketPushPort = process.env.WEBSOCKET_PUSH_PORT;

const RedisConfig = {
  host: 'redis-main',
};

/**
 * Should incoming websocket be permitted to connect?
 * @param wsUserId. The user id as generated by extractWsUserIdFromRequest
 * @param req. The request object (from the http upgrade request to use websockets)
 * @returns {Promise<boolean>}
 */
const permitUserConnection = (wsUserId, request) => {
  return Promise.resolve(true); // permit guest connections
};


/**
 * Should request to join room (sent on incoming websocket) be permitted?
 * @param wsUserId {string}. The user id as generated by extractWsUserIdFromRequest
 * @param roomId {string}. The room/channel the user wants to join
 * @param requestHeaders. Headers sent on the original websockets connection/upgrade request.
 * @returns {Promise<boolean>}
 */
const permitJoiningRoom = (wsUserId, roomId, { requestHeaders }) => {
  return Promise.resolve(true);  // by default, permit anyone who knows the room id to receive those messages
};


/**
 * *extractWsUserIdFromRequest* is used to generate a user id from information in the request headers. When broadcasting to
 * a user, all websocket connections that match this wsUserId receive the message. (The same user with multiple windows/tabs connected will receive it.)
 *
 * When logged in, the 'x-auth-data' header is used. Should guests be permitted, the 'x-auth-guest' header is used, which
 * is a random token generated and stored in the session by *passportjs-auth*.
 *
 * Note: should you decide to link accounts across multiple openId providers and login methods, you might want to use email address
 * as the wsUserId, to cover the edge case of the same person logging in with multiple openId providers. If so, the 'x-auth-data'
 * header includes "email" when available. (Some providers do not share email, namely Twitter)
 *
 * @param req
 * @returns {string} wsUserId
 */
const extractWsUserIdFromRequest = (req) => {
  return req.headers[ 'x-auth-user' ] || req.headers[ 'x-auth-guest' ];
};




function setupWsBehavior({ httpServer, wsServer, redisClient }) {
  setupWsConnections({
    extractWsUserIdFromRequest,
    permitUserConnection,
    socketAddedForUser, httpServer, wsServer
  });
  setupRedisSubscriptionForBroadcast({ redisClient });
  setupRedisSubscriptionForUserLogin({ redisClient });
  setupInboundWsMessages({ wsServer, permitJoiningRoom });
}


module.exports = {
  WebsocketPushPort,
  RedisConfig,
  setupWsBehavior,
};