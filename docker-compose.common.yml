version: '3.7'


x-shared-constants: &shared-constants-volume
  volumes:
    - type: bind
      source: ./shared-constants
      target: /usr/local/shared-constants
      read_only: true

x-multi-service-backend: &multi-service-backend
  <<: *shared-constants-volume
  build:
    context: ./services/backend-api
  depends_on:
    - postgres-main
    - redis-main
  restart: unless-stopped
  environment:
    - RUBY_ENV=production
    - POSTGRES_HOST=postgres-main
    - POSTGRES_DB=${POSTGRES_MAIN_DB}
    - POSTGRES_USER=${POSTGRES_MAIN_USER}
    - POSTGRES_PASSWORD=${POSTGRES_MAIN_PASSWORD}
    - RABBITMQ_ERLANG_COOKIE
    - RABBITMQ_DEFAULT_USER
    - RABBITMQ_DEFAULT_PASS


services:
  traefik-gateway:
    image: traefik:v1.7.16-alpine
    volumes:
      - ./services/traefik-gateway:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock # this gives Traefik access to Docker runtime data including the config-related labels used below
    restart: always
    depends_on:
      - passportjs-auth
    ports: [ "80:80" ]


  frontend-web:
    <<: *shared-constants-volume
    build:
      context: ./services/frontend-web
    ports: [ "8080:8080" ]
    labels:
      # "skipAuth" and "webDefault" are segment names we define for routing rules
      - "traefik.enable=true"
      - "traefik.skipAuth.priority=20"
      - "traefik.skipAuth.frontend.rule=PathPrefix:/static/,/assets/,/favicon."
      - "traefik.webDefault.priority=10"
      - "traefik.webDefault.frontend.rule=PathPrefix:/"
      - "traefik.webDefault.frontend.auth.forward.address=${INTERNAL_AUTH_CHECK}"
      - "traefik.webDefault.frontend.auth.forward.authResponseHeaders=${INTERNAL_AUTH_HEADERS}"
    restart: unless-stopped
    environment:
      - WEBSTACK_HOST
      - WEBSTACK_PROTOCOL
      - WEBSOCKET_WEBSTACK_HOST
      - NODE_ENV=production


  backend-api:
    <<: *multi-service-backend
    ports: [ "3000:3000" ]
    labels:
      - "traefik.enable=true"
      - "traefik.backendApi.priority=50"
      - "traefik.backendApi.frontend.rule=PathPrefix:/api/,/guest/api/"
      - "traefik.backendApi.frontend.auth.forward.address=${INTERNAL_AUTH_CHECK}"
      - "traefik.backendApi.frontend.auth.forward.authResponseHeaders=${INTERNAL_AUTH_HEADERS}"
    command: [ "bundle", "exec", "puma", "-p", "3000", "config.ru" ]


  background-worker:
    <<: *multi-service-backend
    labels:
      - "traefik.enable=false"
    command: [ "/bin/sh", "-c", "./bin/start_background_workers.rb" ]


  passportjs-auth:
    <<: *shared-constants-volume
    build:
      context: ./services/passportjs-auth
    depends_on:
      - redis-main
    ports: [ "4001:4001" ]
    restart: unless-stopped
    environment:
      - PASSPORTJS_AUTH_PORT=4001
      - NODE_ENV=production
      - WEBSTACK_HOST
      - WEBSOCKET_WEBSTACK_HOST
      - WEBSTACK_PROTOCOL
      - AUTH_SESSION_SECRET
      - GITHUB_CLIENT_ID
      - GITHUB_CLIENT_SECRET
      - INTERNAL_AUTH_HEADERS
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.priority=90"
      - "traefik.frontend.rule=PathPrefix:/auth/"
    command: [ "yarn", "start" ]

  websocket-push:
    <<: *shared-constants-volume
    build:
      context: ./services/websocket-push
    ports: [ "8001:8001" ]
    depends_on:
      - redis-main
    command: [ "yarn", "start" ]
    environment:
      - WEBSOCKET_PUSH_PORT=8001
      - NODE_ENV=production
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.websocketPush.priority=40"
      - "traefik.websocketPush.frontend.rule=PathPrefix:/server_notifications/"
      - "traefik.websocketPush.frontend.auth.forward.address=${INTERNAL_AUTH_CHECK}"
      - "traefik.websocketPush.frontend.auth.forward.authResponseHeaders=${INTERNAL_AUTH_HEADERS}"
      - "traefik.backend.loadbalancer.stickiness=true"
      - "traefik.backend.loadbalancer.stickiness.cookieName=websocket_push"


  redis-main:
    build:
      context: ./services/redis-main
    ports: [ "6379:6379" ]
    volumes:
      - type: bind
        source: ./mounted-volumes/redis-main
        target: /data
        # "consistency"for macosx host/container file sharing. "delegated" means container is authoritative. (Use "cached" for source code.)
        consistency: delegated
    restart: always
    labels:
      - "traefik.enable=false"


  postgres-main:
    image: postgres:11.3-alpine
    ports: [ "5432:5432"]
    volumes:
      - type: bind
        source: ./mounted-volumes/postgres-main
        target: /var/lib/postgresql/data
        consistency: delegated
    environment:
      - POSTGRES_DB=${POSTGRES_MAIN_DB}
      - POSTGRES_USER=${POSTGRES_MAIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_MAIN_PASSWORD}
    restart: always
    labels:
      - "traefik.enable=false"


  rabbitmq-broker:
    build:
      context: ./services/rabbitmq-broker
    ports:
      - "5672:5672"
    hostname: rabbitmq-broker
    container_name: rabbitmq-broker
    volumes:
      - type: bind
        source: ./mounted-volumes/rabbitmq-broker
        target: /var/lib/rabbitmq
        consistency: delegated
    environment:
      - RABBITMQ_NODENAME=rabbit@rabbitmq-broker
      - RABBITMQ_ERLANG_COOKIE
      - RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS
    restart: always
    labels:
      - "traefik.enable=false"
